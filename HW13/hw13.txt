Script started on Sat 19 Nov 2022 05:09:44 PM CST
kennedy:vu0062> pwd
/oushomes/Student/vu0062/CS1313
kennedy:vu0062> ls -l
total 316
drwx------. 2 vu0062 students  4096 Nov 19 17:09 .
drwx-----x. 9 vu0062 students  4096 Oct  4 02:09 ..
-rw-r--r--. 1 vu0062 students  6171 Oct 25 16:12 absvalbytype.c
-rw-r--r--. 1 vu0062 students 13183 Nov  8 15:46 big_statistics.c
-rw-r--r--. 1 vu0062 students  3483 Sep 28 13:08 circlecalc.c
-rw-r--r--. 1 vu0062 students  5587 Oct  4 16:46 conversions.c
-rw-r--r--. 1 vu0062 students  2238 Nov  2 17:14 hw11.c
-rw-r--r--. 1 vu0062 students  4907 Nov  2 17:15 hw11.txt
-rw-r--r--. 1 vu0062 students  2971 Nov 19 17:03 hw13.c
-rw-r--r--. 1 vu0062 students     0 Nov 19 17:09 hw13.txt
-rw-r--r--. 1 vu0062 students 26631 Oct 25 16:25 italian.c
-rw-r--r--. 1 vu0062 students 26630 Oct 25 16:24 italian.c~
-rw-r--r--. 1 vu0062 students   923 Nov 19 17:09 makefile
-rw-r--r--. 1 vu0062 students   923 Nov 19 17:09 makefile~
-rw-r--r--. 1 vu0062 students  7267 Nov  7 21:23 mean_dynamic.c
-rw-r--r--. 1 vu0062 students  3908 Aug 27 16:36 my_number.c
-rw-r--r--. 1 vu0062 students  3908 Aug 27 16:35 my_number.c~
-rw-r--r--. 1 vu0062 students  5594 Aug 29 11:03 pp1.txt
-rw-r--r--. 1 vu0062 students  4247 Sep 19 17:47 pp2_example.txt
-rw-r--r--. 1 vu0062 students  9186 Oct  4 16:50 pp3_conversions.txt
-rw-r--r--. 1 vu0062 students  5469 Sep 28 15:17 pp3_example.txt
-rw-r--r--. 1 vu0062 students 24656 Oct  4 16:57 pp3_statistics.txt
-rw-r--r--. 1 vu0062 students  9398 Oct 25 16:17 pp4_example.txt
-rw-r--r--. 1 vu0062 students 38125 Oct 25 16:39 pp4.txt
-rw-r--r--. 1 vu0062 students 10586 Nov  7 21:36 pp5_example.txt
-rw-r--r--. 1 vu0062 students 21603 Nov  8 15:58 pp5.txt
-rw-r--r--. 1 vu0062 students  2808 Sep 19 13:59 read_list.c
-rw-r--r--. 1 vu0062 students 19133 Oct  4 16:54 statistics.c
kennedy:vu0062> cat makefile
hw13:hw13.c
gcc -o hw13 hw13.c -lm

big_statistics:big_statistics.c
gcc -o big_statistics big_statistics.c -lm

mean_dynamic:mean_dynamic.c
gcc -o mean_dynamic mean_dynamic.c -lm

hw11:hw11.c
gcc -o hw11 hw11.c -lm

italian:italian.c
gcc -o italian italian.c -lm

absvalbytype:absvalbytype.c
gcc -o absvalbytype absvalbytype.c -lm

conversions:conversions.c
gcc -o conversions conversions.c -lm

statistics:statistics.c
gcc -o statistics statistics.c -lm

circlecalc:circlecalc.c
gcc -o circlecalc circlecalc.c -lm

census:census.c
gcc -o census census.c

read_list:read_list.c
gcc -o read_list read_list.c

my_number:my_number.c
gcc -o my_number my_number.c

clean:
rm -f my_number
rm -f read_list
rm -f census
rm -f conversions
rm -f statistics
rm -f circlecalc
rm -f absvalbytype
rm -f italian
rm -f hw11
rm -f mean_dynamic
rm -f big_statistics
rm -f hw13
kennedy:vu0062> cat hw13.c

/*
 * imports
 */
#include <stdio.h>
#include <stdlib.h>

/*
 * main
 */
int main()
{
    /*
     * variables
     */
    const int program_success_code = 0;
    const int program_fail_code = -1;
    const int nothing = 0;
    int positives = 0;
    int negatives = 0;
    int zeros = 0;
    int length = 0;
    int k = 0;
    float* array = (float*)NULL;

    /*
     * function prototypes
     */
    int number_of_zeros(float* elements, int number_of_elements);
    int number_of_negative_values(float* elements, int number_of_elements);
    int number_of_positive_values(float* elements, int number_of_elements);

    /*
     * greeting
     */
    printf("Hello user.\n");

    /*
     * get length of array
     */
    printf("Please input the length of your array.\n");
    scanf("%d", &length);

    /*
     * idiotproof length
     */
    if (length <= nothing) {
        printf("You cannot have a length less than or equal to %d.\n", nothing);
        exit(program_fail_code);
    }

    /*
     * memory allocate the array with the length
     */
    array = (float*)malloc(sizeof(float) * length);

    /*
     * check if memory allocation worked
     */
    if (array == (float*)NULL) {
        printf("Could not allocate memory for array.\n");
        exit(program_fail_code);
    }

    /*
     * get the values of the array
     */
    for (k = nothing; k < length; k++) {
        printf("array[%d]=", k);
        scanf("%f", &array[k]);
    }

    /*
     * uses functions to get each of the required values
     */
    zeros = number_of_zeros(array, length);
    negatives = number_of_negative_values(array, length);
    positives = number_of_positive_values(array, length);

    /*
     * outputs the results
     */
    printf("There are %d negatives.\n", negatives);
    printf("There are %d zeros.\n", zeros);
    printf("There are %d positives.\n", positives);

    /*
     * free array from memory
     */
    free(array);
    array = (float*)NULL;

    /*
     * return
     */
    return program_success_code;
}

int number_of_zeros(float* elements, int number_of_elements)
{
    const int nothing = 0;
    int control = 0;
    int count = 0;

    for (control = nothing; control < number_of_elements; control++) {
        if (elements[control] == nothing) {
            count++;
        }
    }

    return count;
}

int number_of_negative_values(float* elements, int number_of_elements)
{
    const int nothing = 0;
    int control = 0;
    int count = 0;

    for (control = nothing; control < number_of_elements; control++) {
        if (elements[control] < nothing) {
            count++;
        }
    }

    return count;
}

int number_of_positive_values(float* elements, int number_of_elements)
{
    const int nothing = 0;
    int control = 0;
    int count = 0;

    for (control = nothing; control < number_of_elements; control++) {
        if (elements[control] > nothing) {
            count++;
        }
    }

    return count;
}kennedy:vu0062> makec clean
rm -f my_number
rm -f read_list
rm -f census
rm -f conversions
rm -f statistics
rm -f circlecalc
rm -f absvalbytype
rm -f italian
rm -f hw11
rm -f mean_dynamic
rm -f big_statistics
rm -f hw13
kennedy:vu0062> make hw13
gcc -o hw13 hw13.c -lm
kennedy:vu0062> hw13
Hello user.
Please input the length of your array.
10
array[0]=-1
array[1]=-2
array[2]=0
array[3]=0
array[4]=4
array[5]=5
array[6]=7
array[7]=8
array[8]=9
array[9]=3
There are 2 negatives.
There are 2 zeros.
There are 6 positives.
kennedy:vu0062> ^Dexit

Script done on Sat 19 Nov 2022 05:10:31 PM CST
